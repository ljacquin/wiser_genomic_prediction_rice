data = df_,
REML = TRUE
)
blup_list_[[str_replace_all(file_, "_spats_adjusted_.*",
replacement = ""
)]] <- data.frame(
"Genotype" = rownames(ranef(lmer_model_)$Genotype),
"blup" = as.numeric(unlist(ranef(lmer_model_)$Genotype))
)
# compute adjusted ls-means for genotypes across environments
lm_model <- lm(formula(paste0(Y, "~ 1 + Genotype + Envir")), data = df_)
ls_means <- as.data.frame(
lsmeans(lm_model, ~Genotype)
)[, c("Genotype", "lsmean")]
# if the model coefficients are not estimable due to collinearity, use lm_()
# to compute the coefficients with a pseudo-inverse approach. Then, use
# lsmeans_() for calculating least squares means, which is based on group_by()
# to replace the original lsmeans() function, as the latter requires a standard lm object.
if (sum(is.na(lm_model$coefficients)) > 0) {
lm_model <- lm_(formula(paste0(Y, "~ 1 + Genotype + Envir")), data = df_)
ls_means <- as.data.frame(
lsmeans_(lm_model, df_)
)
}
colnames(ls_means)[match("lsmean", colnames(ls_means))] <-
paste0(
str_replace_all(file_, "_spats_adjusted_.*", replacement = ""),
"_lsmean"
)
list_ls_means_adj_pheno_per_geno[[
str_replace_all(file_, "_spats_adjusted_.*",
replacement = ""
)
]] <- ls_means
} else {
# compute blups for genotypes using a linear mixed model (LMM) which fits
# pc as fixed effects inorder to account for population structure
# compute aic values in order to select number of pcs
for (n_comp_ in 1:max_n_comp_) {
lmer_pca_model_ <- lmer(
as.formula(paste0(
Y, " ~ 1 + ", paste(pc_var_names_[1:n_comp_],
collapse = " + "
),
" + (1 | Genotype)"
)),
data = df_,
REML = FALSE
)
aic_[n_comp_] <- AIC(lmer_pca_model_)
}
n_opt_comp_aic_ <- which.min(aic_)
print(paste0("number of pc selected: ", n_opt_comp_aic_))
# estimate model based on selected number of pcs which minimize aic
lmer_pca_model_ <- lmer(
as.formula(paste0(
Y, " ~ 1 + ", paste(pc_var_names_[1:n_opt_comp_aic_],
collapse = " + "
),
" + (1 | Genotype)"
)),
data = df_,
REML = TRUE
)
blup_pca_list_[[str_replace_all(file_, "_spats_adjusted_.*",
replacement = ""
)]] <- data.frame(
"Genotype" = rownames(ranef(lmer_pca_model_)$Genotype),
"blup_pca" = as.numeric(unlist(ranef(lmer_pca_model_)$Genotype))
)
# compute blups for genotypes using a linear mixed model (LMM)
lmer_model_ <- lmer(
as.formula(paste0(
Y, " ~ 1 + (1 | Genotype)"
)),
data = df_,
REML = TRUE
)
blup_list_[[str_replace_all(file_, "_spats_adjusted_.*",
replacement = ""
)]] <- data.frame(
"Genotype" = rownames(ranef(lmer_model_)$Genotype),
"blup" = as.numeric(unlist(ranef(lmer_model_)$Genotype))
)
# compute adjusted ls-means for genotypes for unique environment
lm_model <- lm(formula(paste0(Y, "~ 1 + Genotype")), data = df_)
ls_means <- as.data.frame(
lsmeans(lm_model, ~Genotype)
)[, c("Genotype", "lsmean")]
# if the model coefficients are not estimable due to collinearity, use lm_()
# to compute the coefficients with a pseudo-inverse approach. Then, utilize
# lsmeans_() for calculating least squares means, which is based on group_by()
# to replace the original lsmeans() function, as the latter requires a standard lm object.
if (sum(is.na(lm_model$coefficients)) > 0) {
lm_model <- lm_(formula(paste0(Y, "~ 1 + Genotype")), data = df_)
ls_means <- as.data.frame(
lsmeans_(lm_model, df_)
)
}
colnames(ls_means)[match("lsmean", colnames(ls_means))] <-
paste0(
str_replace_all(file_, "_spats_adjusted_.*", replacement = ""),
"_lsmean"
)
list_ls_means_adj_pheno_per_geno[[
str_replace_all(file_, "_spats_adjusted_.*",
replacement = ""
)
]] <- ls_means
}
}
# reduce blup list
blup_pca_df <- Reduce(
function(x, y) {
merge(x, y,
by = "Genotype",
all = T
)
},
blup_pca_list_
)
colnames(blup_pca_df) <- c("Genotype", trait_names_)
# write blups
fwrite(blup_pca_df, file = paste0(
pheno_dir_path_,
"blup_pca_phenotypes.csv"
))
# reduce blup list
blup_df <- Reduce(
function(x, y) {
merge(x, y,
by = "Genotype",
all = T
)
},
blup_list_
)
colnames(blup_df) <- c("Genotype", trait_names_)
# write blups
fwrite(blup_df, file = paste0(
pheno_dir_path_,
"blup_phenotypes.csv"
))
# reduce lsmeans list
lsmean_df <- Reduce(
function(x, y) {
merge(x, y, by = "Genotype", all = T)
},
list_ls_means_adj_pheno_per_geno
)
# write lsmeans
colnames(lsmean_df) <- c("Genotype", trait_names_)
fwrite(lsmean_df,
file = paste0(
pheno_dir_path_,
"adjusted_ls_mean_phenotypes.csv"
)
)
# script meant to perform genomic prediction and analyses for rice
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
if ("rice_env" %in% conda_list()$name) {
print("using rice_env")
use_condaenv("rice_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("rice_env")
use_condaenv("rice_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "rice_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
library(future)
library(future.apply)
library(grDevices)
# define computation mode, i.e. local or cluster
computation_mode <- "local"
# if comutations are local in rstudio, detect and set script path
# automatically using rstudioapi
if (identical(computation_mode, "local")) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("FL", "PH", "YLD", "ZN")
# get kernel and trait arguments
args <- commandArgs(trailingOnly = TRUE)
kernel_num <- as.integer(args[1])
trait_num <- as.integer(args[2])
# kernel type, i.e. "linear" or "identity" for genomic covariance matrix
# (i.e. Gram matrix). NB. "identity" is not recommended due to hypothesis of
# independence between genotypes which is highly unlikely
kernel_ <- kernels_[kernel_num]
print(paste0("kernel: ", kernel_))
# define trait_
trait_ <- traits_[trait_num]
print(paste0("trait: ", trait_))
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("FL", "PH", "YLD", "ZN")
# get kernel and trait arguments
args <- commandArgs(trailingOnly = TRUE)
kernel_num <- as.integer(args[1])
trait_num <- as.integer(args[2])
# kernel type, i.e. "linear" or "identity" for genomic covariance matrix
# (i.e. Gram matrix). NB. "identity" is not recommended due to hypothesis of
# independence between genotypes which is highly unlikely
kernel_ <- kernels_[kernel_num]
print(paste0("kernel: ", kernel_))
# define trait_
trait_ <- traits_[trait_num]
print(paste0("trait: ", trait_))
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("FL", "PH", "YLD", "ZN")
# get kernel and trait arguments
args <- commandArgs(trailingOnly = TRUE)
kernel_num <- as.integer(args[1])
trait_num <- as.integer(args[2])
# kernel type, i.e. "linear" or "identity" for genomic covariance matrix
# (i.e. Gram matrix). NB. "identity" is not recommended due to hypothesis of
# independence between genotypes which is highly unlikely
kernel_ <- kernels_[kernel_num]
print(paste0("kernel: ", kernel_))
# define trait_
trait_ <- traits_[trait_num]
print(paste0("trait: ", trait_))
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
getwd()
list.files('../../data/')
list.files('../../data/phenotype_data/')
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))
View(ls_mean_pheno_df)
pheno_dir_path
list.files(pheno_dir_path)
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))
View(ls_mean_pheno_df)
trait_
trait = "FL"
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
trait_
trait_ = "FL"
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
blup_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"blup_phenotypes.csv"
)))[, c("Genotype", trait_)]
blup_pca_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"blup_pca_phenotypes.csv"
)))[, c("Genotype", trait_)]
View(blup_pca_pheno_df)
styler:::style_active_file()
View(blup_pheno_df)
cor(blup_pca_pheno_df$FL, blup_pheno_df$FL)
# before k-folds cv, ascertain that blups, ls-means and wiser phenotypes are
# associated to the same genotypes
colnames(ls_mean_pheno_df)[
str_detect(colnames(ls_mean_pheno_df),
pattern = trait_
)
] <- paste0(trait_, "_ls_mean")
merged_df <- merge(
wiser_obj$wiser_phenotypes,
ls_mean_pheno_df,
by = "Genotype"
)
# load corrected phenotypes if file exists
wiser_obj <- readRDS(paste0(
wiser_pheno_dir_path,
"wiser_obj_", kernel_,
"_kernel_", trait_
))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
