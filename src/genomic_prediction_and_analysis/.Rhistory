df_h2_ <- as.data.frame(apply(df_h2_, 2, as.numeric))
# initialize plot_ly for violin + boxplots
violin_box_plots_h2_ <- plot_ly()
# add violin plots without points
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_trace(
violin_box_plots_h2_,
type = "violin",  # specify violin plot
y = df_h2_[[method_names[i]]],
name = method_names[i],
points = FALSE,  # remove points
jitter = 0.3,  # add jitter for spread (not used since points are removed)
pointpos = -1.8,  # adjust point position relative to the violin plot (not used here)
marker = list(color = h2_colors_[i]),
fillcolor = h2_colors_[i],
line = list(color = h2_colors_[i]),
meanline = list(visible = FALSE),  # do not show mean line
scalemode = "width",  # keep width constant for comparison
opacity = 0.6  # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_boxplot(
violin_box_plots_h2_,
y = df_h2_[[method_names[i]]],
name = method_names[i],
marker = list(color = h2_colors_[i]),
line = list(color = "black", width = 2),  # black line for the boxplot
fillcolor = "rgba(255,255,255,0)",  # transparent fill to see the violin plot underneath
width = 0.2,  # narrower boxplot to fit inside the violin
notchwidth = 0.4,  # add notch for median
showlegend = FALSE  # hide boxplot from legend
)
}
# add layout
violin_box_plots_h2_ <- violin_box_plots_h2_ %>%
layout(
title = paste0(
"genomic heritability (h2) distributions estimated from GBLUP prediction models for ",
trait_, ", based on ", ncol(omic_df), " snps across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "genomic heritability (h2)",
range = c(0, 1)
),
legend = list(title = list(text = "prediction model"))
)
violin_box_plots_h2_
method_names <- colnames(df_pa_)
df_pa_ <- as.data.frame(apply(df_pa_, 2, as.numeric))
# initialize plot_ly for violin + boxplots
violin_box_plots_pa_ <- plot_ly()
# add violin plots
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_trace(
violin_box_plots_pa_,
type = "violin", # specify violin plot
y = df_pa_[[method_names[i]]],
name = method_names[i],
points = FALSE, # show all points
jitter = 0.3, # add jitter for spread
pointpos = -1.8, # adjust point position relative to the violin plot
marker = list(color = pa_colors_[i]),
fillcolor = pa_colors_[i],
line = list(color = pa_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_boxplot(
violin_box_plots_pa_,
y = df_pa_[[method_names[i]]],
name = method_names[i],
marker = list(color = pa_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_pa_ <- violin_box_plots_pa_ %>%
layout(
title = paste0(
"Genomic pa distributions of models for ",
trait_, ", based on ", ncol(omic_df), " snps across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Predictive ability (PA)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
violin_box_plots_pa_
# initialize plot_ly for violin + boxplots
violin_box_plots_pa_ <- plot_ly()
# add violin plots
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_trace(
violin_box_plots_pa_,
type = "violin", # specify violin plot
y = df_pa_[[method_names[i]]],
name = method_names[i],
points = FALSE, # show all points
jitter = 0.3, # add jitter for spread
pointpos = -1.8, # adjust point position relative to the violin plot
marker = list(color = pa_colors_[i]),
fillcolor = pa_colors_[i],
line = list(color = pa_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_boxplot(
violin_box_plots_pa_,
y = df_pa_[[method_names[i]]],
name = method_names[i],
marker = list(color = pa_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_pa_ <- violin_box_plots_pa_ %>%
layout(
title = paste0(
"Genomic PA distributions of models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Predictive ability (PA)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
violin_box_plots_pa_
# save violin_box_plots_pa_ graphics
saveWidget(violin_box_plots_pa_, file = paste0(
output_pred_graphics_path, trait_, "/genomic_pred_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV.html"
))
# add layout
violin_box_plots_h2_ <- violin_box_plots_h2_ %>%
layout(
title = paste0(
"Genomic heritability (h2) distributions estimated from GBLUP prediction models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Genomic heritability (h2)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
# save violin_box_plots_h2_ graphics
saveWidget(violin_box_plots_h2_, file = paste0(
output_pred_graphics_path, trait_, "/genomic_h2_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV.html"
))
# add stats and save h2 results
df_h2_ <- signif(apply(df_h2_, 2, as.numeric), 2)
rownames(df_h2_) <- paste0("pa_scenario_", 1:nrow(df_h2_))
df_stat <- as.data.frame(rbind(
apply(df_h2_, 2, mean),
apply(df_h2_, 2, sd)
))
df_stat <- signif(apply(df_stat, 2, as.numeric), 2)
rownames(df_stat) <- c("pa_mean", "pa_sd")
df_stat <- as.data.frame(df_stat)
df_h2_ <- rbind(df_h2_, df_stat)
fwrite(df_h2_,
file = paste0(
output_pred_results_path,
"genomic_h2_results_", ncol(omic_df), "_SNP_",
trait_, "_", kernel_, "_kernel_",
k_folds_, "_folds_CV.csv"
), row.names = T
)
print(df_h2_)
violin_box_plots_h2_
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
method_names <- colnames(df_pa_)
df_pa_ <- as.data.frame(apply(df_pa_, 2, as.numeric))
# initialize plot_ly for violin + boxplots
violin_box_plots_pa_ <- plot_ly()
# add violin plots
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_trace(
violin_box_plots_pa_,
type = "violin", # specify violin plot
y = df_pa_[[method_names[i]]],
name = method_names[i],
points = FALSE, # show all points
jitter = 0.3, # add jitter for spread
pointpos = -1.8, # adjust point position relative to the violin plot
marker = list(color = pa_colors_[i]),
fillcolor = pa_colors_[i],
line = list(color = pa_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_boxplot(
violin_box_plots_pa_,
y = df_pa_[[method_names[i]]],
name = method_names[i],
marker = list(color = pa_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_pa_ <- violin_box_plots_pa_ %>%
layout(
title = paste0(
"Genomic PA distributions of models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Predictive ability (PA)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
violin_box_plots_pa_
styler:::style_active_file()
# initialize plot_ly for violin + boxplots
violin_box_plots_pa_ <- plot_ly()
# add violin plots
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_trace(
violin_box_plots_pa_,
type = "violin", # specify violin plot
y = df_pa_[[method_names[i]]],
name = method_names[i],
points = FALSE, # show all points
jitter = 0.3, # add jitter for spread
pointpos = -1.8, # adjust point position relative to the violin plot
marker = list(color = pa_colors_[i]),
fillcolor = pa_colors_[i],
line = list(color = pa_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_pa_ <- add_boxplot(
violin_box_plots_pa_,
y = df_pa_[[method_names[i]]],
name = method_names[i],
marker = list(color = pa_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_pa_ <- violin_box_plots_pa_ %>%
layout(
title = paste0(
"Genomic PA distributions of models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Predictive ability (PA)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
# save violin_box_plots_pa_ graphics
saveWidget(violin_box_plots_pa_, file = paste0(
output_pred_graphics_path, trait_, "/genomic_pred_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV.html"
))
# add stats and save predictive ability results
df_pa_ <- signif(apply(df_pa_, 2, as.numeric), 2)
rownames(df_pa_) <- paste0("pa_scenario_", 1:nrow(df_pa_))
df_stat <- as.data.frame(rbind(
apply(df_pa_, 2, mean),
apply(df_pa_, 2, sd)
))
df_stat <- signif(apply(df_stat, 2, as.numeric), 2)
rownames(df_stat) <- c("pa_mean", "pa_sd")
df_stat <- as.data.frame(df_stat)
df_pa_ <- rbind(df_pa_, df_stat)
fwrite(df_pa_,
file = paste0(
output_pred_results_path,
"genomic_pred_results_", ncol(omic_df), "_SNP_",
trait_, "_", kernel_, "_kernel_", k_folds_, "_folds_CV.csv"
), row.names = T
)
print(df_pa_)
# get computed h2 for gblup
df_h2_ <- as.data.frame(df_result_[, str_detect(
colnames(df_result_),
pattern = "_h2"
)])
colnames(df_h2_) <- str_replace_all(
colnames(df_h2_),
pattern = "_h2",
replacement = ""
)
method_names <- colnames(df_h2_)
df_h2_ <- as.data.frame(apply(df_h2_, 2, as.numeric))
# initialize plot_ly for violin + boxplots
violin_box_plots_h2_ <- plot_ly()
# add violin plots without points
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_trace(
violin_box_plots_h2_,
type = "violin", # specify violin plot
y = df_h2_[[method_names[i]]],
name = method_names[i],
points = FALSE, # remove points
jitter = 0.3, # add jitter for spread (not used since points are removed)
pointpos = -1.8, # adjust point position relative to the violin plot (not used here)
marker = list(color = h2_colors_[i]),
fillcolor = h2_colors_[i],
line = list(color = h2_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_boxplot(
violin_box_plots_h2_,
y = df_h2_[[method_names[i]]],
name = method_names[i],
marker = list(color = h2_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_h2_ <- violin_box_plots_h2_ %>%
layout(
title = paste0(
"Genomic heritability (h2) distributions estimated from GBLUP prediction models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Genomic heritability (h2)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
# save violin_box_plots_h2_ graphics
saveWidget(violin_box_plots_h2_, file = paste0(
output_pred_graphics_path, trait_, "/genomic_h2_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV.html"
))
# add stats and save h2 results
df_h2_ <- signif(apply(df_h2_, 2, as.numeric), 2)
rownames(df_h2_) <- paste0("pa_scenario_", 1:nrow(df_h2_))
df_h2_ <- df_pa_[,c('GBLUP_wiser','GBLUP_ls_means')]
method_names <- colnames(df_h2_)
df_h2_ <- as.data.frame(apply(df_h2_, 2, as.numeric))
# initialize plot_ly for violin + boxplots
violin_box_plots_h2_ <- plot_ly()
# add violin plots without points
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_trace(
violin_box_plots_h2_,
type = "violin", # specify violin plot
y = df_h2_[[method_names[i]]],
name = method_names[i],
points = FALSE, # remove points
jitter = 0.3, # add jitter for spread (not used since points are removed)
pointpos = -1.8, # adjust point position relative to the violin plot (not used here)
marker = list(color = h2_colors_[i]),
fillcolor = h2_colors_[i],
line = list(color = h2_colors_[i]),
meanline = list(visible = FALSE), # do not show mean line
scalemode = "width", # keep width constant for comparison
opacity = 0.6 # slight transparency to see the boxplot behind it
)
}
# add boxplots on top of the violin plots but hide from legend
for (i in seq_along(method_names)) {
violin_box_plots_h2_ <- add_boxplot(
violin_box_plots_h2_,
y = df_h2_[[method_names[i]]],
name = method_names[i],
marker = list(color = h2_colors_[i]),
line = list(color = "black", width = 2), # black line for the boxplot
fillcolor = "rgba(255,255,255,0)", # transparent fill to see the violin plot underneath
width = 0.2, # narrower boxplot to fit inside the violin
notchwidth = 0.4, # add notch for median
showlegend = FALSE # hide boxplot from legend
)
}
# add layout
violin_box_plots_h2_ <- violin_box_plots_h2_ %>%
layout(
title = paste0(
"Genomic heritability (h2) distributions estimated from GBLUP prediction models for ",
trait_, ", based on ", ncol(omic_df), " SNP across ",
n_shuff_, " shuffling scenarios for ", k_folds_, "-folds cv"
),
yaxis = list(
title = "Genomic heritability (h2)",
range = c(0, 1)
),
legend = list(title = list(text = "Prediction model"))
)
# save violin_box_plots_h2_ graphics
saveWidget(violin_box_plots_h2_, file = paste0(
output_pred_graphics_path, trait_, "/genomic_h2_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV.html"
))
# add stats and save h2 results
df_h2_ <- signif(apply(df_h2_, 2, as.numeric), 2)
rownames(df_h2_) <- paste0("pa_scenario_", 1:nrow(df_h2_))
df_stat <- as.data.frame(rbind(
apply(df_h2_, 2, mean),
apply(df_h2_, 2, sd)
))
df_stat <- signif(apply(df_stat, 2, as.numeric), 2)
rownames(df_stat) <- c("pa_mean", "pa_sd")
df_stat <- as.data.frame(df_stat)
df_h2_ <- rbind(df_h2_, df_stat)
fwrite(df_h2_,
file = paste0(
output_pred_results_path,
"genomic_h2_results_", ncol(omic_df), "_SNP_",
trait_, "_", kernel_, "_kernel_",
k_folds_, "_folds_CV.csv"
), row.names = T
)
print(df_h2_)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
env_
env_ = 'BEL_2023'
paste0(
output_pred_graphics_path, trait_, "/genomic_pred_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
env_, "_", k_folds_, "_folds_CV.html"
)
paste0(
output_pred_graphics_path, trait_, "/genomic_pred_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV_",env_ ,".html"
)
paste0(
output_pred_graphics_path, trait_, "/genomic_h2_results_",
trait_, "_", kernel_, "_kernel_", ncol(omic_df), "_SNP_",
k_folds_, "_folds_CV_",env_ ,".html"
)
env_
paste0(
output_pred_results_path,
"genomic_h2_results_", ncol(omic_df), "_SNP_",
trait_, "_", kernel_, "_kernel_",
k_folds_, "_folds_CV_",env_,".csv"
)
paste0(
output_pred_results_path,
"genomic_pred_results_", ncol(omic_df), "_SNP_",
trait_, "_", kernel_, "_kernel_",
k_folds_, "_folds_CV_",env_,".csv"
)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
