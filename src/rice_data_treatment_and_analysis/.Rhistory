install_tensorflow(envname = "pine_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
library(future)
library(future.apply)
library(grDevices)
# define computation mode, i.e. local or cluster
computation_mode <- "cluster"
# if comutations are local in rstudio, detect and set script path
# automatically using rstudioapi
if (identical(computation_mode, "local")) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
pa_colors_ <- c(blue_gradient, yellow_orange_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(blue_gradient[3], yellow_orange_gradient[3])
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("H", "I", "D", "T4", "T5", "T6")
kernel_num = 1
trait_num = 1
# kernel type, i.e. "linear" or "identity" for genomic covariance matrix
# (i.e. Gram matrix). NB. "identity" is not recommended due to hypothesis of
# independence between genotypes which is highly unlikely
kernel_ <- kernels_[kernel_num]
print(paste0("kernel: ", kernel_))
# define trait_
trait_ <- traits_[trait_num]
print(paste0("trait: ", trait_))
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw and ls-means phenotype and genotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
omic_df <- as.data.frame(fread(paste0(
geno_dir_path,
"genomic_data.csv"
)))
# remove rows with na, inf or char associated to trait for raw_pheno_df
idx_na_inf_char_raw <- which(is.na(raw_pheno_df[, trait_]) |
is.infinite(raw_pheno_df[, trait_]) |
is.na(suppressWarnings(as.numeric(raw_pheno_df[, trait_]))))
if (length(idx_na_inf_char_raw) > 0) {
raw_pheno_df <- raw_pheno_df[-idx_na_inf_char_raw, ]
}
# remove rows with na, inf or char associated to trait for ls_mean_pheno_df
idx_na_inf_char_ls_means <- which(is.na(ls_mean_pheno_df[, trait_]) |
is.infinite(ls_mean_pheno_df[, trait_]) |
is.na(suppressWarnings(as.numeric(ls_mean_pheno_df[, trait_]))))
if (length(idx_na_inf_char_ls_means) > 0) {
ls_mean_pheno_df <- ls_mean_pheno_df[-idx_na_inf_char_ls_means, ]
}
# remove monomorphic markers
omic_df <- remove_monomorphic_markers(omic_df)
monomorphic_markers_list_ <- omic_df$monomorphic_markers
omic_df <- omic_df$filtered_df
colnames(omic_df)[1] <- "Genotype"
# merge ls_mean_pheno_df and omic_df for integrity of analyses
merged_df <- merge(ls_mean_pheno_df, omic_df, by = "Genotype")
ls_mean_pheno_df <- merged_df[, c("Genotype", trait_)]
omic_df <- merged_df[, -match(c("Genotype", trait_), colnames(merged_df))]
rownames(omic_df) <- merged_df$Genotype
rm(merged_df)
# get fixed effect vars where latitude and longitude are fitted as quantitative
# variables for each environment (i.e. combination of site, year and block)
fixed_effect_vars_ <- grep("_latitude$|_longitude$", colnames(raw_pheno_df), value = TRUE)
fixed_effect_vars_
# script meant to reformat data for genomic prediction
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(devtools)
install_other_requirements <- F
if (install_other_requirements) {
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("snpStats")
BiocManager::install("mixOmicsTeam/mixOmics")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
}
library(mixOmics)
library(data.table)
library(plotly)
library(ggplot2)
library(umap)
library(dplyr)
library(Matrix)
library(graphics)
library(htmlwidgets)
library(rstudioapi)
library(stringr)
library(tidyr)
library(dplyr)
library(lsmeans)
# detect and set script path automatically, and source functions
setwd(dirname(getActiveDocumentContext()$path))
source("../functions.R")
# set options to increase memory
options(expressions = 5e5)
options(warn = -1)
emm_options(rg.limit = 10e6)
# set path for genomic data and phenotype data
genom_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set output result path for genomic graphics
output_genom_graphics_path <- "../../results/genomic_prediction_graphics/"
# define traits_
traits_ <- c("FL", "PH", "YLD", "ZN")
# get genomic data
geno_df <- t(as.data.frame(fread(paste0(
genom_dir_path,
"PCT27_TP334_genotypes.txt"
))))
col_names_ <- geno_df[1, -1]
row_names_ <- geno_df[-1, 1]
geno_df <- geno_df[-1, -1]
colnames(geno_df) <- col_names_
rownames(geno_df) <- row_names_
# get phenotype data
pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"PCT27_TP334_phenotypes.csv"
)))
colnames(pheno_df)[match(
"DNAID",
colnames(pheno_df)
)] <- "Genotype"
# get common genotypes between genomic and phenotype data
pheno_df <- match_indices(pheno_df, geno_df)
geno_df <- geno_df[rownames(geno_df) %in% pheno_df$Genotype, ]
# create new factor generation-block-trial
pheno_df$Envir <- paste0(
pheno_df$TRIAL, "_",
pheno_df$BLOC, "_",
pheno_df$GENERATION
)
# write reformatted datasets
fwrite(pheno_df,
file = paste0(pheno_dir_path, "phenotype_data.csv")
)
fwrite(as.data.frame(geno_df),
file = paste0(genom_dir_path, "genomic_data.csv"),
row.names = T
)
# get ls-means for each trait across all generations, blocks and trials
# initialize list for traits ls-means
ls_means_list_ <- vector("list", length(traits_))
names(ls_means_list_) <- traits_
for (trait_ in traits_) {
pheno_df_trait_ <- pheno_df[
which(pheno_df[, trait_] != "na"),
]
# apply multiple regression first
lm_ <- lm(
as.formula(
paste0(
trait_,
" ~  1 + Genotype + Envir"
)
),
data = pheno_df_trait_
)
# get genotype ls-means for trait_
ls_means_list_[[trait_]] <- as.data.frame(lsmeans(
lm_,
~Genotype
))[, c("Genotype", "lsmean")]
}
ls_means_df <- Reduce(
function(x, y) {
merge(x, y,
by = "Genotype",
all = T
)
},
ls_means_list_
)
colnames(ls_means_df) <- c("Genotype", traits_)
# write ls-means
fwrite(ls_means_df, file = paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# script meant to perform genomic prediction and analyses for rice
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
if ("rice_env" %in% conda_list()$name) {
print("using rice_env")
use_condaenv("rice_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("rice_env")
use_condaenv("rice_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "rice_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
library(future)
library(future.apply)
library(grDevices)
# define computation mode, i.e. local or cluster
computation_mode <- "cluster"
# if comutations are local in rstudio, detect and set script path
# automatically using rstudioapi
if (identical(computation_mode, "local")) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
pa_colors_ <- c(blue_gradient, yellow_orange_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(blue_gradient[3], yellow_orange_gradient[3])
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("FL", "PH", "YLD", "ZN")
# get kernel and trait arguments
args <- commandArgs(trailingOnly = TRUE)
kernel_num <- as.integer(args[1])
trait_num <- as.integer(args[2])
# kernel type, i.e. "linear" or "identity" for genomic covariance matrix
# (i.e. Gram matrix). NB. "identity" is not recommended due to hypothesis of
# independence between genotypes which is highly unlikely
kernel_ <- kernels_[kernel_num]
print(paste0("kernel: ", kernel_))
# define trait_
trait_ <- traits_[trait_num]
print(paste0("trait: ", trait_))
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw and ls-means phenotype and genotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
# script meant to reformat data for genomic prediction
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(devtools)
install_other_requirements <- F
if (install_other_requirements) {
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("snpStats")
BiocManager::install("mixOmicsTeam/mixOmics")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
}
library(mixOmics)
library(data.table)
library(plotly)
library(ggplot2)
library(umap)
library(dplyr)
library(Matrix)
library(graphics)
library(htmlwidgets)
library(rstudioapi)
library(stringr)
library(tidyr)
library(dplyr)
library(lsmeans)
# detect and set script path automatically, and source functions
setwd(dirname(getActiveDocumentContext()$path))
source("../functions.R")
# set options to increase memory
options(expressions = 5e5)
options(warn = -1)
emm_options(rg.limit = 10e6)
# set path for genomic data and phenotype data
genom_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set output result path for genomic graphics
output_genom_graphics_path <- "../../results/genomic_prediction_graphics/"
# define traits_
traits_ <- c("FL", "PH", "YLD", "ZN")
# get genomic data
geno_df <- t(as.data.frame(fread(paste0(
genom_dir_path,
"PCT27_TP334_genotypes.txt"
))))
col_names_ <- geno_df[1, -1]
row_names_ <- geno_df[-1, 1]
geno_df <- geno_df[-1, -1]
colnames(geno_df) <- col_names_
rownames(geno_df) <- row_names_
# get phenotype data
pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"PCT27_TP334_phenotypes.csv"
)))
colnames(pheno_df)[match(
"DNAID",
colnames(pheno_df)
)] <- "Genotype"
# get common genotypes between genomic and phenotype data
pheno_df <- match_indices(pheno_df, geno_df)
geno_df <- geno_df[rownames(geno_df) %in% pheno_df$Genotype, ]
# create new factor generation-block-trial
pheno_df$Envir <- paste0(
pheno_df$TRIAL, "_",
pheno_df$BLOC, "_",
pheno_df$GENERATION
)
# write reformatted datasets
fwrite(pheno_df,
file = paste0(pheno_dir_path, "phenotype_data.csv")
)
fwrite(as.data.frame(geno_df),
file = paste0(genom_dir_path, "genomic_data.csv"),
row.names = T
)
# get ls-means for each trait across all generations, blocks and trials
# initialize list for traits ls-means
ls_means_list_ <- vector("list", length(traits_))
names(ls_means_list_) <- traits_
for (trait_ in traits_) {
pheno_df_trait_ <- pheno_df[
which(pheno_df[, trait_] != "na"),
]
# apply multiple regression first
lm_ <- lm(
as.formula(
paste0(
trait_,
" ~  1 + Genotype + Envir"
)
),
data = pheno_df_trait_
)
# get genotype ls-means for trait_
ls_means_list_[[trait_]] <- as.data.frame(lsmeans(
lm_,
~Genotype
))[, c("Genotype", "lsmean")]
}
ls_means_df <- Reduce(
function(x, y) {
merge(x, y,
by = "Genotype",
all = T
)
},
ls_means_list_
)
colnames(ls_means_df) <- c("Genotype", traits_)
# write ls-means
fwrite(ls_means_df, file = paste0(
pheno_dir_path,
"ls_mean_phenotypes.csv"
))
